<?xml version="1.0" encoding="UTF-8"?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms" xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml" x:Class="WertheApp.OS.PageReplacementStrategiesHelp">
    <ContentPage.Content>
        <ScrollView x:Name="scrollView" Margin="10">
            <StackLayout>
                <Label Text="Page Replacement Strategies" FontSize = "30"/>
                <Label Text="There are several more or less effective algorithms to implement a page replacement strategy. &#10;"/>

                <Label Text="Reference Sequence" FontAttributes="Bold"/>
                <Label Text="A reference sequence are the ongoing numbers of virtual pages a process accesses during execution. &#10;"/>

                <Label Text="Paging" FontAttributes="Bold"/>
                <Label Text="A virtual page must be mapped to a real page in memory(RAM) before execution. Virtual and real memory pages have the same size. The offset of the virtual memory address navigates directly in both pages. &#10;"/>

                <Label Text="Page Fault" FontAttributes="Bold"/>
                <Label Text="A page fault occurs if the actual virtual page is not mapped to a real page yet. The page table of each process shows the translations of virtual memory pages into real pages if already loaded into RAM. Process execution goes fast with less page faults. If a page fault occurs, the virtual page must be transfered from (hard) disk to RAM. If memory in RAM for the new virtual page is available this loading is done immedialtely. If there are no more free RAM pages available a virtual page has to be replaced by the new virtual page in execution. &#10;"/>


                <Label Text="Optimal Strategy" FontSize = "24"/>
                <Label Text="The optimal strategy assumes that the reference sequence is known in advance. The page that will be referenced again latest (according to the reference sequence) is going to be replaced. &#10;"/>

                <Label Text="Benchmark" FontAttributes="Bold"/>
                <Label Text="We can compare the effectiveness against the optimal strategy that leads to minimal page fault occurrence. &#10;"/>

                <Label Text="First In First Out (FiFo) Strategy" FontSize = "24"/>
                <Label Text="The page that was loaded first into RAM is also the first to be replaced. &#10;"/>
                
                <Label Text="Recently Not Used (RNU) Strategy" FontSize = "24"/>
                <Label Text="The pages in RAM are diveded into four classes based on R- and M-Bit flags. A M-Bit setting indicates that some contents of this page has been modified which occures to pages holding data frequently. Thus this page needs to be copied back to disk for further use. A R-Bit setting indicates that this page was recently accessed. Any R-Bits are periodically reset. Thus a R-Bit setting applies to recently accessed pages only. &#10; &#x2022; Class 0: no bits set &#10; &#x2022; Class 1: only the M-Bit is set &#10; &#x2022; Class 2: only the R-Bit is set &#10; &#x2022; Class 3: both R- and M-Bit set &#10;"/>
                
                <Label Text="Second Chance Variant" FontSize = "24"/>
                <Label Text="A page that is referenced and is already in RAM due to a previously non continuous access is threaded as a new page occurrence. We place it back to the top RAM position. Remember, pages are not moved in different RAM or on different disk page positions, respectively but we do this to remember time stamps of access. &#10;"/>
                <!--Label Text="This is underlined text." TextDecorations="Underline"  /-->

                <!--Label Text="This is text with strikethrough." TextDecorations="Strikethrough" /-->

                <!--Label Text="This is underlined text with strikethrough." TextDecorations="Underline, Strikethrough" /-->

                <!--Label Text="This text will be displayed in uppercase." TextTransform="Uppercase" /-->

                <!--Label Text="Character spaced text" CharacterSpacing="10" /-->

                <!--Label Text="First line &#10; Second line" /-->

                <!--Label>
                    <Label.Text>
                        First line
                        Second line
                    </Label.Text>
                </-->

                <!--Label Text="Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                       In facilisis nulla eu felis fringilla vulputate. Nullam porta eleifend lacinia. Donec at iaculis tellus."
                       LineBreakMode="WordWrap"
                       MaxLines="2" /-->

                <!--Label TextColor="#77d065" FontSize = "20" Text="This is a green label." /-->
                <Label x:Name="last"/>

            </StackLayout>
        </ScrollView>
    </ContentPage.Content>
</ContentPage>
